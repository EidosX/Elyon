// Copyright (c) 2023 Diego Imbert
// 
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT


using std.control.binop.{Binop}
using std.control.binop.chaining
using std.data.ast.{Var}

def Ordering
  dat Lesser
  dat Equal
  dat Greater

trait Ord<t: Type>
  compare(a: t, b: t): Ordering

==(a, a) = True
==(a, b) = False
!=(a, b) = ¬(a == b)

(<)<t: Ord>(a: t, b: t) = compare<t>(a, b) == Lesser
(>)<t: Ord>(a: t, b: t) = compare<t>(a, b) == Greater
(<=)<t: Ord>(a: t, b: t) = a == b || (<)<t>(a, b)
(>=)<t: Ord>(a: t, b: t) = a == b || (>)<t>(a, b)

impl Binop<"Comparison">
  operators = [>, >=, <, <=, ==, !=]
  chaining([a]) = Var(True)
  chaining([a, op, b, ..xs]) = 
    Var(&&) ◂ (op ◂ a ◂ b) ◂ chaining([b, ..xs])
  higherThan = ["LogicalConjunction"]

impl Binop<"Addition">
  operators = [+, -]
  chaining = chaining.left
  higherThan = ["Comparison"]

impl Binop<"Multiplication">
  operator = [*, /]
  chaining = chaining.left
  higherThan = ["Addition"]