// Copyright (c) 2023 Diego Imbert
// 
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT


use std.control.binop.{Binop}
use std.control.binop.chaining

def Ordering
  dat Lesser
  dat Equal
  dat Greater

trait Ord for (t: Type)
  compare(a: t, b: t): Ordering

==(a, a) = True
==(a, b) = False
!=(a, b) = Â¬(a == b)

<{t: Ord}(a: t, b: t) = compare{impl = t}(a, b) == Lesser
>{t: Ord}(a: t, b: t) = compare{impl = t}(a, b) == Greater
<={t: Ord}(a: t, b: t) = a == b || <{t}(a, b)
>={t: Ord}(a: t, b: t) = a == b || >{t}(a, b)

impl Binop for "Comparison"
  operators = [>, >=, <, <=, ==, !=]
  chaining([a]) = True
  chaining([a, op, b, ..xs]) = op(a, b) && chaining([b, ..xs])
  higherThan = ["LogicalConjunction"]

impl Binop for "Addition"
  operators = [+, -]
  chaining = chaining.left
  higherThan = ["Comparison"]

impl Binop for "Multiplication"
  operator = [*, /]
  chaining = chaining.left
  higherThan = ["Addition"]