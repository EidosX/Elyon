// Copyright (c) 2023 Diego Imbert
// 
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT

use std.control.binop.{Binop}

def Bool
  dat True
  dat False

&&(True, True) = True
&&(_: Bool, _: Bool) = False

||(False, False) = False
||(_: Bool, _: Bool) = True

|(f: Fn([Bool], Bool), g: Fn([Bool], Bool)) = fn(x) -> f(x) || g(x)
&(f: Fn([Bool], Bool), g: Fn([Bool], Bool)) = fn(x) -> f(x) && g(x)

impl Binop for "LogicalDisjunction"
  operators = [||, |,]
  associativity = "right"

impl Binop for "LogicalConjunction"
  operators = [&&, &,]
  associativity = "right"
  higherThan = ["LogicalDisjunction"]

¬(True) = False
¬(False) = True
