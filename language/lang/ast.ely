// Copyright (c) 2023 Diego Imbert
// 
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT

ast(x) → AST = compilerImplemented("ast")

decl AST
  decl Term
    dat Var(x)
    dat Lambda(:Pattern, :Term)
    dat Appl(:Term, :Term)
  
  decl BoolExpr
    Appl(Appl(Var(&&), :BoolExpr), :BoolExpr)
    Appl(Appl(Var(||), :BoolExpr), :BoolExpr)
    Appl(Var(¬), :BoolExpr)
    Var(:Bool)

==>(f1: Void → Bool, f2: Void → Bool) = toDNF(t1) ==>> toCNF(t2)
  where Lambda(xVar, t1) = simplify ◃ ast ◂ f1
        Lambda(yVar, t2y) = simplify ◃ ast ◂ f2
        t2 = substitute yVar xVar t2y
        ==>>(dnf, cnf) = forAll(dnf) ◃ fn d -> 
                         forAll(cnf) ◂ fn c -> 
                            oneOf(c, ∈ d)
==>(f1: Void → Bool, f2: Void → Bool) = combine(simplify ◃ ast, ==, f1, f2)