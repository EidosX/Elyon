// Copyright (c) 2023 Diego Imbert
// 
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT

trait Type for type
  is(x): Bool 

dat Exact(x)
impl Type for Exact y
  is(x) = x == y

dat Any
impl Type for Any
  is(x) = True

dat Void
impl Type for Void
  is(x) = False

dat Union(t1: Type, t2: Type)
impl Type for Union(t1, t2)
  is(x) = is<t1>(x) || is<t2>(x)

dat Intersection(t1: Type, t2: Type)
impl Type for Intersection(t1, t2)
  is(x) = is<t1>(x) && is<t2>(x)

dat Constrained(t: Type, f: t → Bool)
impl Type for Constrained(t, f)
  is(x) = is<t>(x) && f(x)

|(t1: Type, t2: Type) = Union(t1, t2)

&(t1: Type, t2: Type) = Intersection(t1, t2)
&(t: Type, f: t → Bool) = Constrained(t, f)
